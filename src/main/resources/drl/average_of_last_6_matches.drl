package drl;

import nl.jqno.foobal.domain.*;

dialect "mvel"

rule "Average of home team's last 6 matches"
when
	$result : ScoreKeeper()
	
	$h1     : Outcome( homeTeam == $result.homeTeam,
	                   $h1Date : millis )
	$h2     : Outcome( homeTeam == $result.homeTeam,
	                   millis < $h1Date, $h2Date : millis )
	$h3     : Outcome( homeTeam == $result.homeTeam,
	                   millis < $h2Date, $h3Date : millis )
	$o1     : Outcome( outTeam == $result.homeTeam,
	                   $o1Date : millis )
	$o2     : Outcome( outTeam == $result.homeTeam,
	                   millis < $o1Date, $o2Date : millis )
	$o3     : Outcome( outTeam == $result.homeTeam,
	                   millis < $o2Date, $o3Date : millis )
	
	not Outcome( homeTeam == $result.homeTeam,
	             millis > $h1Date )
	not Outcome( homeTeam == $result.homeTeam,
	             millis > $h2Date && millis < $h1Date )
	not Outcome( homeTeam == $result.homeTeam,
	             millis > $h3Date && millis < $h2Date )
	
	not Outcome( outTeam == $result.homeTeam,
	             millis > $o1Date )
	not Outcome( outTeam == $result.homeTeam,
	             millis > $o2Date && millis < $o1Date )
	not Outcome( outTeam == $result.homeTeam,
	             millis > $o3Date && millis < $o2Date )
then
	System.out.println( "H" + $h1.homeScore + " -> " + $h1 )
	System.out.println( "H" + $h2.homeScore + " -> " + $h2 )
	System.out.println( "H" + $h3.homeScore + " -> " + $h3 )
	System.out.println( "H" + $o1.outScore + " -> " + $o1 )
	System.out.println( "H" + $o2.outScore + " -> " + $o2 )
	System.out.println( "H" + $o3.outScore + " -> " + $o3 )
	insert( new HomeScore( ( $h1.homeScore + $h2.homeScore + $h3.homeScore + $o1.outScore + $o2.outScore + $o3.outScore - 3 ) / 6 ) )
end

rule "Average of out team's last 6 matches"
when
	$result : ScoreKeeper()
	
	$h1     : Outcome( homeTeam == $result.outTeam,
	                   $h1Date : millis )
	$h2     : Outcome( homeTeam == $result.outTeam,
	                   millis < $h1Date, $h2Date : millis )
	$h3     : Outcome( homeTeam == $result.outTeam,
	                   millis < $h2Date, $h3Date : millis )
	$o1     : Outcome( outTeam == $result.outTeam,
	                   $o1Date : millis )
	$o2     : Outcome( outTeam == $result.outTeam,
	                   millis < $o1Date, $o2Date : millis )
	$o3     : Outcome( outTeam == $result.outTeam,
	                   millis < $o2Date, $o3Date : millis )
	
	not Outcome( homeTeam == $result.outTeam,
	             millis > $h1Date )
	not Outcome( homeTeam == $result.outTeam,
	             millis > $h2Date && millis < $h1Date )
	not Outcome( homeTeam == $result.outTeam,
	             millis > $h3Date && millis < $h2Date )
	
	not Outcome( outTeam == $result.outTeam,
	             millis > $o1Date )
	not Outcome( outTeam == $result.outTeam,
	             millis > $o2Date && millis < $o1Date )
	not Outcome( outTeam == $result.outTeam,
	             millis > $o3Date && millis < $o2Date )
then
	System.out.println( "O" + $h1.homeScore + " -> " + $h1 )
	System.out.println( "O" + $h2.homeScore + " -> " + $h2 )
	System.out.println( "O" + $h3.homeScore + " -> " + $h3 )
	System.out.println( "O" + $o1.outScore + " -> " + $o1 )
	System.out.println( "O" + $o2.outScore + " -> " + $o2 )
	System.out.println( "O" + $o3.outScore + " -> " + $o3 )
	insert( new OutScore( ( $h1.homeScore + $h2.homeScore + $h3.homeScore + $o1.outScore + $o2.outScore + $o3.outScore - 3 ) / 6 ) )
end

rule "Combine home and out scores"
when
	$result : ScoreKeeper()
	$home   : HomeScore()
	$out    : OutScore()
then
	$result.add("Average of last 6 matches", $home.score, $out.score);
end